public class sudoku {


    public static boolean issafe(int sudoku[][], int row, int col, int digit){
        // coulumn condition:
        for (int i = 0; i<=8; i++){
            if (sudoku[i][col]==digit){
                return false;
            }
        }// row:
        for (int j =0; j<8; j++) {
            if (sudoku[row][j] == digit) {
                return false;
            }
        }
            // grid:
            int str = (row/3) * 3;
            int stc = (col/3) * 3;
  // str-> starting row:
  // stc -> starting column:


            for (int i = str; i<str+3; i++){
                for (int j = stc; j<stc+3; j++){
                   if (sudoku[i][j]==digit){
                       return false;
                   }
                }
            }
            return true;
    }
    public static boolean sodokusolver(int sudoku[][], int row,int col ) {
        // base case
          if(row==9&&col==0){
              return true;
          }
          // recursion work:
        int nextrow = row;
        int nextcol = col + 1;
        if (col + 1 == 9) {
            nextrow = row + 1;
            nextcol = 0;
        }

        if (sudoku[row][col] != 0) {   // this is condition for already set element
            return sodokusolver(sudoku, nextrow, nextcol);
        }
        for (int digit = 1; digit <= 9; digit++) {   // this is for element we want to place
            if (issafe(sudoku, row, col, digit)) {
                sudoku[row][col] = digit;
                if (sodokusolver(sudoku, nextrow, nextcol)) {   // then solution exist
                    return true;
                }
                sudoku[row][col] = 0;
            }

        }
        return false;
    }
            public static void printsoduku(int sudoku[][]){
        for (int i = 0; i<9; i++){
            for (int j = 0; j<9; j++){
                System.out.print(sudoku[i][j]+" ");
            }
            System.out.println();
        }
            }



    public static void main(String[] args){
        int sudoku [][] = {{0, 0, 8, 0, 0, 0, 0, 0, 0},
                {4, 9, 0, 1, 5, 7, 0, 0, 2},
                {0, 0, 3, 0, 0, 4, 1, 9, 0},
                {1, 8, 5, 0, 6, 0, 0, 2, 0},
                {0, 0, 0, 0, 2, 0, 0, 6, 0},
                {9, 6, 0, 4, 0, 5, 3, 0, 0},
                {0, 3, 0, 0, 7, 2, 0, 0, 4},
                {0, 4, 9, 0, 3, 0, 0, 5, 7},
                {8, 2, 7, 0, 0, 9, 0, 1, 3},};
        if (sodokusolver(sudoku,0,0)){
            System.out.println("solution exist");
            printsoduku(sudoku);
        }else {
            System.out.println("solution not exist:");
        }





    }
}
